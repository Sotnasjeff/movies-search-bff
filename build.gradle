plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'io.ktor.plugin' version '2.2.4'
}

group "com"
version "0.0.1"
mainClassName = "io.ktor.server.netty.EngineMain"

def isDevelopment = project.ext.has("development")
applicationDefaultJvmArgs = ["-Dio.ktor.development=$isDevelopment"]

repositories {
    mavenCentral()
}

dependencies {

    //Core
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    //DI
    implementation "org.kodein.di:kodein-di-generic-jvm:$kodein_version"

    //Ktor
    implementation "io.ktor:ktor-server-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-netty-jvm:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-config-yaml:$ktor_version"
    implementation "io.ktor:ktor-server-locations:$ktor_version"
    implementation "io.ktor:ktor-server-status-pages:$ktor_version"
    implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-server-auto-head-response:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"

    //Serializer
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_datatype_version"

    //Logs
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j2_version"
    implementation "com.lmax:disruptor:$disruptor_version"

    //Observability
    implementation "io.ktor:ktor-server-metrics-micrometer:$ktor_version"
    implementation "io.micrometer:micrometer-registry-prometheus:$prometheus_version"

    //Resilience
    implementation("io.github.resilience4j:resilience4j-circuitbreaker:$resilience_4j_version")
    implementation("io.github.resilience4j:resilience4j-kotlin:$resilience_4j_version")
    implementation("io.github.resilience4j:resilience4j-retry:$resilience_4j_version")
    implementation("io.github.resilience4j:resilience4j-micrometer:$resilience_4j_version")

    //Test
    testImplementation "io.ktor:ktor-server-tests-jvm:$ktor_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "io.ktor:ktor-client-mock:$ktor_version"
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
    testImplementation "io.mockk:mockk:$mockk_version"
}